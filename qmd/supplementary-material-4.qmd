<!-- %:::% .common h1 begin %:::% -->
# Sample Balance {#sec-sm-sample-balance}
<!-- %:::% .common h1 end %:::% -->

```{r}
#| label: setup
#| include: false

source(here::here("R", "_setup.R"))
```

## Overview

This document outlines the procedure for balancing the sample used in the hypothesis test.

As with all analyses in this thesis, the process is fully reproducible and was conducted using the [R programming language](https://www.r-project.org/) [@rcoreteama] along with the [Quarto](https://quarto.org/) publishing system [@allaire].

## Setting the Enviroment

```{r}
#| eval: false

library(broom)
library(dplyr)
library(here)
library(janitor)
library(magrittr)
library(parsnip)
library(report)
library(rlang)
library(sidrar)
library(targets)
library(tidyr)
library(workflows)
```

```{r}
source(here::here("R", "get_brazil_region.R"))
source(here::here("R", "get_brazil_state.R"))
source(here::here("R", "utils-stats.R"))
```

```{r}
#| include: false

library(magrittr)
library(rlang)
library(targets)
```

## Loading and Processing the Sample Data

You can visualize the data wrangling pipeline at the code repository in the  [`_targets.R`](https://github.com/danielvartan/mastersthesis/blob/main/_targets.R) file.

::: {.callout-warning}
Please note that these values refer to the group of **states in the Brazilian time zone UTC-3**, not the whole country.
:::

```{r}
#| eval: false
#| output: false

targets::tar_make(script = here::here("_targets.R"))
```

```{r}
#| output: false

data <- 
  targets::tar_read("filtered_data", store = here::here("_targets")) |>
  dplyr::filter(state %in% get_brazil_state_by_utc(-3, "state")) |>
  dplyr::select(country, region, state, sex, age, msf_sc) |>
  tidyr::drop_na(state, sex, age) |>
  dplyr::mutate(
    age_group = dplyr::case_when(
      age >= 18 & age < 20 ~ "18-19",
      age >= 20 & age < 25 ~ "20-24",
      age >= 25 & age < 30 ~ "25-29",
      age >= 30 & age < 40 ~ "30-39",
      age >= 40 & age < 50 ~ "40-49",
      age >= 50 & age < 60 ~ "50-59",
      age >= 60 & age < 65 ~ "60-64",
      age >= 65 ~ "65+"
    ),
    age_group = factor(
      age_group,
      levels = c(
        "18-19", "20-24", "25-29", "30-39", "40-49", "50-59", "60-64", 
        "65+"
      ),
      ordered = TRUE
    )
  ) |>
  dplyr::relocate(age_group, .after = age)

data
```

## Getting the Population Data

The sample data was obtained in 2017 from October 15th to 21st by a broadcast of the online questionnaire on a popular Brazil's Sunday TV show with national reach [@redeglobo2017]. Here the Brazilian Institute of Geography and Statistics's ([IBGE](https://www.ibge.gov.br/)) Continuous National Household Sample Survey ([PNAD Contínua](https://www.ibge.gov.br/estatisticas/sociais/trabalho/17270-pnad-continua.html)) its used for a estimate of the population distribution in this timeframe [@ibgee]. The data can be accessed at the [IBGE's SIDRA](https://sidra.ibge.gov.br/tabela/6407) platform (IBGE's Table 6407).

The balance is made considering the distribution of the population related only to the variables `state`, `sex` and `age`.

::: {.callout-warning}
Please note that these values refer to the group of **states in the Brazilian time zone UTC-3**, not the whole country.
:::

```{r}
#| message: false
#| warning: false

prettycheck:::assert_internet()

ibge_6407_data <- 
  sidrar::get_sidra(
    api = paste0(
      "/t/6407/n1/all/n3/all/v/606/p/2017/c2/all/c58/1144,1145,",
      "1152,2793,3299,3300,3301,3302,6798"
    )
  ) |>
  dplyr::as_tibble() |>
  dplyr::select(
    dplyr::all_of(
      c(
        "Valor", "Brasil e Unidade da Federação", "Ano", "Sexo", 
        "Grupo de idade"
      )
    )
  ) |>
  dplyr::rename(
    n = Valor,
    state = `Brasil e Unidade da Federação`,
    year = Ano,
    sex = Sexo,
    age_group = `Grupo de idade`
  ) |>
  dplyr::filter(
    state != "Brasil", 
    sex != "Total",
    age_group != "60 anos ou mais"
  ) |>
  dplyr::arrange(state, sex, age_group) |>
  dplyr::mutate(
    year = as.integer(year),
    country = "Brazil",
    region = get_brazil_region(state, "state"),
    sex = dplyr::case_when(
      sex == "Homens" ~ "Male",
      sex == "Mulheres" ~ "Female"
    ),
    sex = factor(sex, ordered = FALSE),
    age_group = dplyr::case_when(
      age_group == "18 a 19 anos" ~ "18-19",
      age_group == "20 a 24 anos" ~ "20-24",
      age_group == "25 a 29 anos" ~ "25-29",
      age_group == "30 a 39 anos" ~ "30-39",
      age_group == "40 a 49 anos" ~ "40-49",
      age_group == "50 a 59 anos" ~ "50-59",
      age_group == "60 a 64 anos" ~ "60-64",
      age_group == "65 anos ou mais" ~ "65+"
    ),
    age_group = factor(age_group, ordered = TRUE),
    n = as.integer(n * 1000)
  ) |>
  dplyr::relocate(year, country, region, state, sex, age_group, n) |>
  dplyr::filter(state %in% get_brazil_state_by_utc(-3, "state")) |>
  dplyr::mutate(
    n_rel = n / sum(n),
    n_per = (n / sum(n)) * 100
  )

ibge_6407_data
```

```{r}
ibge_6407_data |> dplyr::glimpse()
```

```{r}
ibge_6407_data |> summarise_data("age_group")
```

```{r}
summarise_data(ibge_6407_data, "sex")
```

```{r}
ibge_6407_data |> summarise_data("state")
```

```{r}
summarise_data(ibge_6407_data, "region")
```

```{r}
ibge_6407_data |> summarise_data("country")
```

## Comparing Sample Data With the Population Data

::: {.callout-warning}
Please note that these values refer to the group of **states in the Brazilian time zone UTC-3**, not the whole country.
:::

```{r}
compare_sample(data, ibge_6407_data, "age_group")
```

```{r}
compare_sample(data, ibge_6407_data, "sex")
```

```{r}
compare_sample(data, ibge_6407_data, "state")
```

```{r}
compare_sample(data, ibge_6407_data, "region")
```

```{r}
compare_sample(data, ibge_6407_data, "country")
```

```{r}
#| include: false

write_in_results_yml(
  list(
    sa_analysis_sample_rel_comparison_age_group = 
      compare_sample(data, ibge_6407_data, "age_group"),
    sb_analysis_sample_rel_comparison_sex = 
      compare_sample(data, ibge_6407_data, "sex"),
    sb_analysis_sample_rel_comparison_state = 
      compare_sample(data, ibge_6407_data, "state"),
    sb_analysis_sample_rel_comparison_region = 
      compare_sample(data, ibge_6407_data, "region")
  )
)
```

## Adjusting Sample Data with the Population Data

The tables above indicate an overrepresentation of states like São Paulo and Rio de Janeiro, while states such as Amapá and Tocantins are underrepresented. To achieve a balanced sample, a cell weighting procedure was use [see @kalton2003] based on the characteristics of `state`, `sex` and `age group`, using data from the 2017 PNAD as a reference.

$$
\text{Cell weighting}: \cfrac{\% \ \text{2017 PNAD}}{\% \ \text{Survey sample}}
$$

```{r}
ibge_6407_data |> 
  dplyr::select(state, sex, age_group, n) |>
  tidyr::pivot_wider(names_from = state, values_from = n) |>
  janitor::adorn_totals(c("row", "col")) |>
  janitor::adorn_percentages("col") |>
  janitor::adorn_pct_formatting(digits = 3) |>
  janitor::adorn_ns() |>
  dplyr::as_tibble()
```

See <https://www.tidyverse.org/blog/2022/05/case-weights/> to learn more.

```{r}
weights_data <- 
  ibge_6407_data |>
  dplyr::left_join(
    data |> 
      dplyr::summarise(
        n = dplyr::n(), 
        .by = c("country", "region", "state", "sex", "age_group")
      ) |>
      dplyr::mutate(
        n_rel = n / sum(n),
        n_per = (n / sum(n)) * 100
      ),
    by = c("country", "region", "state", "sex", "age_group"),
    suffix = c("_pnad", "_sample")
  ) |>
  dplyr::relocate(year, .before = country) |>
  dplyr::mutate(
    cell_weight = parsnip::importance_weights(n_per_pnad / n_per_sample)
    # inv_prob_weight = parsnip::importance_weights(1 / (n / sum(n)))
  ) |>
  dplyr::select(
    country, region, state, sex, age_group, cell_weight
  ) |>
  dplyr::arrange(state, sex, age_group)

weights_data
```

```{r}
test_data <-
  data |>
  dplyr::mutate(
    msf_sc = 
      msf_sc |>
      lubritime:::link_to_timeline(
        threshold = hms::parse_hms("12:00:00")
      ) |>
      as.numeric()
  ) |>
  dplyr::left_join(
    weights_data,
    by = c("country", "region", "state", "sex", "age_group")
  )
```

## Testing Fiting a Model with the Weights

```{r}
#| code-fold: false

model <- 
  parsnip::linear_reg() |> 
  parsnip::set_engine("lm") |>
  parsnip::set_mode("regression")
```

```{r}
#| code-fold: false

workflow <- 
  workflows::workflow() |>
  workflows::add_case_weights(cell_weight) |>
  workflows::add_formula(msf_sc ~ sex + age) |>
  workflows::add_model(model)

workflow
```

```{r}
#| code-fold: false

fit <- workflow |> parsnip::fit(test_data)
```

```{r}
fit |>
  broom::tidy() |> 
  janitor::adorn_rounding(5)
```

```{r}
#| include: false

fit |> 
  broom::augment(test_data) |>
  janitor::adorn_rounding(5)
```

```{r}
fit |> 
  broom::glance() |> 
  tidyr::pivot_longer(cols = dplyr::everything()) |>
  janitor::adorn_rounding(10)
```

```{r}
fit_engine <- fit |> parsnip::extract_fit_engine()

fit_engine |> summary()
```

```{r}
#| code-fold: false

fit_engine_2 <- 
  lm(
    formula = msf_sc ~ sex + age, 
    weights = cell_weight,
    data = test_data
  )

fit_engine_2 |> summary()
```

```{r}

report::report(fit_engine_2)
```

```{r}
#| code-fold: false

lm(formula = msf_sc ~ sex + age, data = test_data) |> summary()
```
