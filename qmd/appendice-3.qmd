# Leocadio et al. (2017): Y-axis comparison

## Overview

This document brings a y-axis comparison related to the figure 2 from @leocadio-miguel2017.

## The Horner & Östberg scale

The Horner & Östberg (HO) scale [@horne1976] was one of the first scales developed to assess chronotype. It is a self-report questionnaire that asks about the preferred time of day for various activities, such as waking up, going to bed, and peak performance. The scale is composed of 19 items, and the total score **ranges from 16 to 86**. The lower the score, the more evening-oriented the individual is, and the higher the score, the more morning-oriented the individual is.

::: {#tbl-chapter-4-horne-1976-table-1}
```{r}
dplyr::tibble(
  Category = c(
    "Definitely morning type",
    "Moderately morning type",
    "Neither type",
    "Moderately evening type",
    "Definitely evening type"
  ),
  Score = c(
    "16-30",
    "31-41",
    "42-58",
    "59-69",
    "70-86"
  )
)
```

[Source: Reproduction from @horne1976.]{.legend}

Horner & Östberg five point Morningness-Eveningness scale, with the corresponding scores.
:::

::: {#fig-appendice-3-leocadio-miguel-2017-figure-1}
![](../images/leocadio-miguel-2017-figure-1.png){width=100%}

[Source: Reproduction from @leocadio-miguel2017.]{.legend}

Distribution of HO scores for the entire sample of @leocadio-miguel2017 data. Each bar for each score represents the frequency (number of subjects). Low scores represent evening types and high scores morning types.
:::

## The figure

::: {#fig-appendice-3-leocadio-miguel-2017-figure-2}
![](../images/leocadio-miguel-2017-figure-2.png){width=100%}

[Source: Reproduction from @leocadio-miguel2017.]{.legend}

Mean HO scores (±SE) along a latitudinal cline, showing corresponding annual average of solar irradiation level (W/m2).
:::


::: {#fig-appendice-3-leocadio-miguel-2017-figure-2-with-guides}
![](../images/leocadio-miguel-2017-figure-2-with-guides.png){width=100%}

[Source: Adaptation from @leocadio-miguel2017.]{.legend}

Same as the last figure, but with guides to help the comparison.
:::

## Latitude estimation (upper x-axis)

The latitude does not have a fixed scale, it is pointed in relation to the second x-axis (Solar irradiation), but it's possible to get a good estimate of the values by counting the pixel distances.

**Interval distances**

- 0-13: 87 pixels. 87 / 13: 1 point ~ 6.692308 pixels.
- 13-18: 88 pixels. 88 / (18 - 13): 1 point == 17.6 pixels.
- 18-22: 87 pixels. 87 / (22 - 18): 1 point == 21.75 pixels.
- 22-26: 87 pixels. 87 / (26 - 22): 1 point == 21.75 pixels.
- 26-29: 88 pixels. 88 / (29 - 26): 1 point == ~ 29.333 pixels.
- 29-32: 86 pixels. 86 / (32 - 29): 1 point == ~ 28.667 pixels.

**Estimation**

- 1. point: 0 to point: 42 pixels. Estimation: `42 / (87 / 13)` =~ 6.275862
- 2. point: 13 to point: 44 pixels. Estimation: `13 + (44 / (88 / (18 - 13)))` == 15.5
- 3. point: 18 to point: 43 pixels. Estimation: `18 + (43 / (87 / (22 - 18)))` =~ 19.97701
- 4. point: 22 to point: 44 pixels. Estimation: `22 + (44 / (87 / (26 - 22)))` =~ 24.02299
- 5. point: 26 to point: 44 pixels. Estimation: `26 + (44 / (87 / (29 - 26)))` =~ 27.51724
- 6. point: 29 to point: 44 pixels. Estimation: `29 + (44 / (86 / (32 - 29)))` =~ 30.53488

## HO estimation (y-axis)

The HO value scale is fixed, so it's possible to get the values by counting the pixel distances.

**Pixel/point**

- 44.5-48.5: 402 pixels. 402 / (48.5 - 44.5): 1 point == 100.5 pixels.

**Estimation**

- 1. point: 44.5 to point: 338 pixels. Estimation: `44.5 + (338 / (402 / (48.5 - 44.5)))` =~ 47.86318
- 2. point: 44.5 to point: 316 pixels. Estimation: `44.5 + (316 / (402 / (48.5 - 44.5)))` =~ 47.64428
- 3. point: 44.5 to point: 217 pixels. Estimation: `44.5 + (217 / (402 / (48.5 - 44.5)))` =~ 46.6592
- 4. point: 44.5 to point: 155 pixels. Estimation: `44.5 + (155 / (402 / (48.5 - 44.5)))` =~ 46.04229
- 5. point: 44.5 to point: 94 pixels. Estimation: `44.5 + (94 / (402 / (48.5 - 44.5)))` =~ 45.43532
- 6. point: 44.5 to point: 94 pixels. Estimation: `44.5 + (94 / (402 / (48.5 - 44.5)))` =~ 45.43532

## Standard error estimation (y-axis)

The standard error (SE) is shown in the y-axis, so it's possible to get the values by counting the pixel distances.

**Pixel/point**

- 44.5-48.5: 402 pixels. 402 / (48.5 - 44.5): 1 point == 100.5 pixels.

**Estimation**

- 1. point SE: 44.5 to upper SE: 369 pixels. Estimation: `44.5 + (369 / (402 / (48.5 - 44.5)))` =~ 48.17164
- 2. point SE: 44.5 to upper SE: 357 pixels. Estimation: `44.5 + (357 / (402 / (48.5 - 44.5)))` =~ 48.05224
- 3. point SE: 44.5 to upper SE: 240 pixels. Estimation: `44.5 + (240 / (402 / (48.5 - 44.5)))` =~ 46.88806
- 4. point SE: 44.5 to upper SE: 176 pixels. Estimation: `44.5 + (176 / (402 / (48.5 - 44.5)))` =~ 46.25124
- 5. point SE: 44.5 to upper SE: 134 pixels. Estimation: `44.5 + (134 / (402 / (48.5 - 44.5)))` =~ 45.83333
- 6. point SE: 44.5 to upper SE: 131 pixels. Estimation: `44.5 + (131 / (402 / (48.5 - 44.5)))` =~ 45.80348

## Data

```{r}
data <- 
  dplyr::tibble(
    ho = c(
      44.5 + (338 / (402 / (48.5 - 44.5))),
      44.5 + (316 / (402 / (48.5 - 44.5))),
      44.5 + (217 / (402 / (48.5 - 44.5))),
      44.5 + (155 / (402 / (48.5 - 44.5))),
      44.5 + (94 / (402 / (48.5 - 44.5))),
      44.5 + (94 / (402 / (48.5 - 44.5)))
    ),
    latitude = c(
      42 / (87 / 13),
      13 + (44 / (88 / (18 - 13))),
      18 + (43 / (87 / (22 - 18))),
      22 + (44 / (87 / (26 - 22))),
      26 + (44 / (87 / (29 - 26))),
      29 + (44 / (86 / (32 - 29)))
    )
  ) |>
  dplyr::mutate(
    se_upper = c(
      44.5 + (369 / (402 / (48.5 - 44.5))),
      44.5 + (357 / (402 / (48.5 - 44.5))),
      44.5 + (240 / (402 / (48.5 - 44.5))),
      44.5 + (176 / (402 / (48.5 - 44.5))),
      44.5 + (134 / (402 / (48.5 - 44.5))),
      44.5 + (131 / (402 / (48.5 - 44.5)))
    ),
    se = se_upper - ho
  )
```

## Ploting the data

```{r}
data |>
  ggplot2::ggplot(
    ggplot2::aes(
      x = latitude,
      y = ho
    )
  ) +
  ggplot2::geom_point(shape = 15, size = 3) +
  ggplot2::geom_errorbar(
    ggplot2::aes(
      x = latitude,
      y = ho,
      ymin = ho - se,
      ymax= ho + se
    ),
    data = data,
    show.legend = FALSE,
    inherit.aes = FALSE,
    width = 0.5,
    linewidth = 0.5
  ) +
  ggplot2::geom_smooth(
    method = "lm",
    formula = y ~ x,
    se = FALSE,
    color = "red"
  ) +
  ggplot2::scale_x_continuous(
    breaks = c(0, 13, 18, 22, 16, 29, 32),
    labels = c("0º", "13º", "18º", "22º", "26º", "29º", "32º"),
    limits = c(0, 32)
  ) +
  ggplot2::labs(
    x = "Latitude",
    y = "HO"
  )
```

The same data but adjusting for the minimum and maximum values of the y-axis.

```{r}
data |>
  ggplot2::ggplot(
    ggplot2::aes(
      x = latitude,
      y = ho
    )
  ) +
  ggplot2::geom_point(shape = 15, size = 3) +
  ggplot2::geom_errorbar(
    ggplot2::aes(
      x = latitude,
      y = ho,
      ymin = ho - se,
      ymax= ho + se
    ),
    data = data,
    show.legend = FALSE,
    inherit.aes = FALSE,
    width = 0.5,
    linewidth = 0.5
  ) +
  ggplot2::geom_smooth(
    method = "lm",
    formula = y ~ x,
    se = FALSE,
    color = "red"
  ) +
  ggplot2::scale_x_continuous(
    breaks = c(0, 13, 18, 22, 16, 29, 32),
    labels = c("0º", "13º", "18º", "22º", "26º", "29º", "32º"),
    limits = c(0, 32)
  ) +
  ggplot2::scale_y_continuous(
    breaks = seq(16, 86, 10),
    limits = c(16, 86)
  ) +
  ggplot2::labs(
    x = "Latitude",
    y = "HO"
  )
```
